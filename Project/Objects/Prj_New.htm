<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Prj_New.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Prj_New.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Dec 16 09:54:37 2022
<BR><P>
<H3>Maximum Stack Usage =        384 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
at_net_recv_cb &rArr; net_recv_handle &rArr; net_operation_handle &rArr; StartSampleList &rArr; StartSampleUpload &rArr; sim7020_handle &rArr; net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32f4xx_it.o(i.BusFault_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[20]">CAN0_EWMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1e]">CAN0_RX0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1f]">CAN0_RX1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1d]">CAN0_TX_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4c]">CAN1_EWMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4a]">CAN1_RX0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4b]">CAN1_RX1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[49]">CAN1_TX_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[58]">DCI_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[39]">DMA0_Channel7_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[42]">DMA1_Channel0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[43]">DMA1_Channel1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[44]">DMA1_Channel2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[45]">DMA1_Channel3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[46]">DMA1_Channel4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4e]">DMA1_Channel5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4f]">DMA1_Channel6_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[50]">DMA1_Channel7_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from gd32f4xx_it.o(i.DebugMon_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[47]">ENET_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[48]">ENET_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3a]">EXMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[32]">EXTI10_15_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[21]">EXTI5_9_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5a]">FPU_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32f4xx_it.o(i.HardFault_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2a]">I2C0_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[29]">I2C0_EV_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2c]">I2C1_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2b]">I2C1_EV_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[53]">I2C2_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[52]">I2C2_EV_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[62]">IPA_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[b]">LVD_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32f4xx_it.o(i.MemManage_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32f4xx_it.o(i.NMI_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from gd32f4xx_it.o(i.PendSV_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[f]">RCU_CTC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2d]">SPI0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2e]">SPI1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5d]">SPI3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5e]">SPI4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5f]">SPI5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from gd32f4xx_it.o(i.SVC_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from gd32f4xx_it.o(i.SysTick_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[64]">SystemInit</a> from system_gd32f4xx.o(i.SystemInit) referenced from startup_gd32f450.o(.text)
 <LI><a href="#[c]">TAMPER_STAMP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[22]">TIMER0_BRK_TIMER8_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[25]">TIMER0_CC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[24]">TIMER0_TRG_CMT_TIMER10_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[23]">TIMER0_UP_TIMER9_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[26]">TIMER1_IRQHandler</a> from gd32f4xx_it.o(i.TIMER1_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[27]">TIMER2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[28]">TIMER3_IRQHandler</a> from gd32f4xx_it.o(i.TIMER3_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3c]">TIMER4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[40]">TIMER5_DAC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[41]">TIMER6_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[35]">TIMER7_BRK_TIMER11_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[38]">TIMER7_CC_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[37]">TIMER7_TRG_CMT_TIMER13_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[36]">TIMER7_UP_TIMER12_IRQHandler</a> from gd32f4xx_it.o(i.TIMER7_UP_TIMER12_IRQHandler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[61]">TLI_ER_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[60]">TLI_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[59]">TRNG_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3e]">UART3_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[3f]">UART4_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5b]">UART6_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5c]">UART7_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[2f]">USART0_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[30]">USART1_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[31]">USART2_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[51]">USART5_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[4d]">USBFS_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[34]">USBFS_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[55]">USBHS_EP1_In_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[54]">USBHS_EP1_Out_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[57]">USBHS_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[56]">USBHS_WKUP_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32f4xx_it.o(i.UsageFault_Handler) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32f450.o(.text) referenced from startup_gd32f450.o(RESET)
 <LI><a href="#[65]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32f450.o(.text)
 <LI><a href="#[67]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[68]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[66]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[6b]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[6d]">at_net_con_cb</a> from at_recv_cb.o(i.at_net_con_cb) referenced from dev_sim7020.o(i.sim7020_register_cb)
 <LI><a href="#[6e]">at_net_recv_cb</a> from at_recv_cb.o(i.at_net_recv_cb) referenced from dev_sim7020.o(i.sim7020_register_cb)
 <LI><a href="#[6c]">at_signal_cb</a> from at_recv_cb.o(i.at_signal_cb) referenced from dev_sim7020.o(i.sim7020_register_cb)
 <LI><a href="#[6a]">fputc</a> from usart_config.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[69]">isspace</a> from isspace_c.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[63]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[65]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(.text)
</UL>
<P><STRONG><a name="[17c]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[88]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[17d]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[17e]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[17f]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[180]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[181]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN0_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>CAN0_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN0_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>CAN0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN1_EWMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>ENET_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER0_BRK_TIMER8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIMER0_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER0_TRG_CMT_TIMER10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER0_UP_TIMER9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIMER5_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIMER7_BRK_TIMER11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIMER7_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER7_TRG_CMT_TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TLI_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TLI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>USART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USBFS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBFS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USBHS_EP1_In_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USBHS_EP1_Out_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>USBHS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USBHS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32f450.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[bc]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_read
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_sensor_id
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_udp_tcp
</UL>

<P><STRONG><a name="[114]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_dma_config
</UL>

<P><STRONG><a name="[182]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[183]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[184]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaRxPacket
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_deinit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_atcmd
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_execute_instruction
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_deinit
</UL>

<P><STRONG><a name="[185]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[146]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_debug_data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_operation_handle
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_heart_data
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_udp_tcp
</UL>

<P><STRONG><a name="[f0]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_wait_reply
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_match_obj
</UL>

<P><STRONG><a name="[93]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_debug_data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_operation_handle
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChannelList
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_heart_data
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_udp_tcp
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_wait_reply
</UL>

<P><STRONG><a name="[f2]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_register_callback
</UL>

<P><STRONG><a name="[e8]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_net_recv_cb
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_receive
</UL>

<P><STRONG><a name="[e7]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_debug_data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_operation_handle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_updata_head_info
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_heart_data
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_udp_tcp
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_last_recv
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_receive
</UL>

<P><STRONG><a name="[74]"></a>__0sscanf</STRONG> (Thumb, 48 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_net_recv_cb
</UL>

<P><STRONG><a name="[76]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batVolt
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batVolt
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batVolt
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatGetPrecent
</UL>

<P><STRONG><a name="[8f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatGetPrecent
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batVolt
</UL>

<P><STRONG><a name="[186]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[187]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[188]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[189]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[75]"></a>__vfscanf_char</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[66]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[67]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[18a]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[18b]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[7c]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[7b]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[70]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[18c]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>isspace</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, isspace_c.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ctype_lookup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[86]"></a>__vfscanf</STRONG> (Thumb, 808 bytes, Stack size 88 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[89]"></a>__ctype_lookup</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, ctype_c.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[18d]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[18e]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[8a]"></a>BatGetPrecent</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, adc_config.o(i.BatGetPrecent))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BatGetPrecent &rArr; batVolt &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashBatteryCapacity
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batVolt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acqBat
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_updata_head_info
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[b7]"></a>Get_Tick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systick.o(i.Get_Tick))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_sector_by_address
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_start
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPIReadByte
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPICommand
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_datas_transmit
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>Inc_Tick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systick.o(i.Inc_Tick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[94]"></a>LoRa_execute_instruction</STRONG> (Thumb, 544 bytes, Stack size 32 bytes, service_logic.o(i.LoRa_execute_instruction))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LoRa_execute_instruction &rArr; loraTxData &rArr; loraSendDataFrame &rArr; loraSendPkg &rArr; SX1278_LoRaEntryTx &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraTxData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_network_id_to_flash
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensorid_form_flash
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>ReLoadSersorId</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, fmc_flash.o(i.ReLoadSersorId))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ReLoadSersorId &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_double_words_form_flash
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_reboot
</UL>

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>SX1278_LoRaEntryRx</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, sx1278.o(i.SX1278_LoRaEntryRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX1278_LoRaEntryRx &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_Reset
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_DelayMs
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_defaultConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_clearLoRaIrq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSetMode
</UL>

<P><STRONG><a name="[a6]"></a>SX1278_LoRaEntryTx</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, sx1278.o(i.SX1278_LoRaEntryTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SX1278_LoRaEntryTx &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_Reset
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_defaultConfig
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_clearLoRaIrq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSetMode
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendPkg
</UL>

<P><STRONG><a name="[a7]"></a>SX1278_LoRaRxPacket</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, sx1278.o(i.SX1278_LoRaRxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1278_LoRaRxPacket &rArr; SX1278_SPIBurstRead &rArr; SX1278_hw_SPIReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_GetDIO0
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_clearLoRaIrq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIBurstRead
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_receive_data
</UL>

<P><STRONG><a name="[aa]"></a>SX1278_LoRaTxPacket</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sx1278.o(i.SX1278_LoRaTxPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX1278_LoRaTxPacket &rArr; SX1278_SPIRead &rArr; SX1278_hw_SPIReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_standby
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_DelayMs
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_clearLoRaIrq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIBurstWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendPkg
</UL>

<P><STRONG><a name="[a9]"></a>SX1278_SPIBurstRead</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, sx1278.o(i.SX1278_SPIBurstRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SX1278_SPIBurstRead &rArr; SX1278_hw_SPIReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SetNSS
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPIReadByte
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPICommand
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaRxPacket
</UL>

<P><STRONG><a name="[ab]"></a>SX1278_SPIBurstWrite</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sx1278.o(i.SX1278_SPIBurstWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1278_SPIBurstWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SetNSS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPICommand
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
</UL>

<P><STRONG><a name="[a3]"></a>SX1278_SPIRead</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sx1278.o(i.SX1278_SPIRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1278_SPIRead &rArr; SX1278_hw_SPIReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SetNSS
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPIReadByte
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPICommand
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaRxPacket
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
</UL>

<P><STRONG><a name="[a1]"></a>SX1278_SPIWrite</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1278.o(i.SX1278_SPIWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SetNSS
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPICommand
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_sleep
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaRxPacket
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_standby
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_entryLoRa
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_clearLoRaIrq
</UL>

<P><STRONG><a name="[b0]"></a>SX1278_begin</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, sx1278.o(i.SX1278_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SX1278_begin &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_defaultConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSetMode
</UL>

<P><STRONG><a name="[a2]"></a>SX1278_clearLoRaIrq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_clearLoRaIrq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1278_clearLoRaIrq &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaRxPacket
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
</UL>

<P><STRONG><a name="[b2]"></a>SX1278_config</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, sx1278.o(i.SX1278_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_sleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_standby
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_entryLoRa
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIBurstWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_defaultConfig
</UL>

<P><STRONG><a name="[a0]"></a>SX1278_defaultConfig</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sx1278.o(i.SX1278_defaultConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_begin
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
</UL>

<P><STRONG><a name="[b4]"></a>SX1278_entryLoRa</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_entryLoRa))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1278_entryLoRa &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
</UL>

<P><STRONG><a name="[a5]"></a>SX1278_hw_DelayMs</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_hw_DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1278_hw_DelayMs
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_Reset
</UL>

<P><STRONG><a name="[a8]"></a>SX1278_hw_GetDIO0</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_hw_GetDIO0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX1278_hw_GetDIO0
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaRxPacket
</UL>

<P><STRONG><a name="[a4]"></a>SX1278_hw_Reset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_hw_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1278_hw_Reset &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SetNSS
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
</UL>

<P><STRONG><a name="[ae]"></a>SX1278_hw_SPICommand</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sx1278.o(i.SX1278_hw_SPICommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1278_hw_SPICommand
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Tick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIBurstWrite
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIBurstRead
</UL>

<P><STRONG><a name="[af]"></a>SX1278_hw_SPIReadByte</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, sx1278.o(i.SX1278_hw_SPIReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1278_hw_SPIReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Tick
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_flag_get
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_transmit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_i2s_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIBurstRead
</UL>

<P><STRONG><a name="[ad]"></a>SX1278_hw_SetNSS</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sx1278.o(i.SX1278_hw_SetNSS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIRead
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_Reset
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIBurstWrite
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIBurstRead
</UL>

<P><STRONG><a name="[b1]"></a>SX1278_hw_init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_hw_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX1278_hw_init &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SetNSS
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_begin
</UL>

<P><STRONG><a name="[bb]"></a>SX1278_read</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sx1278.o(i.SX1278_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SX1278_read
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_receive_data
</UL>

<P><STRONG><a name="[b3]"></a>SX1278_sleep</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
</UL>

<P><STRONG><a name="[ac]"></a>SX1278_standby</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx1278.o(i.SX1278_standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SX1278_standby &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_SPIWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_config
</UL>

<P><STRONG><a name="[be]"></a>StartSampleUpload</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, net_protocol.o(i.StartSampleUpload))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = StartSampleUpload &rArr; sim7020_handle &rArr; net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_handle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_retra_handle
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_probeID
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ls_close
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_loss_handle
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSampleList
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Inc_Tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>SystemInit</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemInit &rArr; system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.TIMER1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER1_IRQHandler &rArr; dma_channel_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_enable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.TIMER3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TIMER3_IRQHandler &rArr; dci_dma_config &rArr; dma_single_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_flag_clear
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample_flag
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample_count
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_dma_config
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIMER7_UP_TIMER12_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, gd32f4xx_it.o(i.TIMER7_UP_TIMER12_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TIMER7_UP_TIMER12_IRQHandler &rArr; dci_dma_config &rArr; dma_single_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_dma_config
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acumulator_sensor_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[f8]"></a>Uart_recv_buf_regster</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, usart_config.o(i.Uart_recv_buf_regster))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
</UL>

<P><STRONG><a name="[f9]"></a>Uart_recv_reset</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart_config.o(i.Uart_recv_reset))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_receive
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32f450.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>WriteFlashBatteryCapacity</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, fmc_flash.o(i.WriteFlashBatteryCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = WriteFlashBatteryCapacity &rArr; fmc_erase_sector_by_address &rArr; get_falsh_sector &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_sector_by_address
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatGetPrecent
</UL>

<P><STRONG><a name="[d8]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18f]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[91]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_reboot
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_handle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_close_sta
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_datas_to_flash
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_falsh_sector
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_sector_by_address
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendSpecifiedPkg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraDealData
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendPkg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendDataFrame
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraAddExtDataPkg
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acumulator_sensor_data
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Flash_double_Word
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_req
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_reboot
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_start
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acumulator_average
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_execute_instruction
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSampleUpload
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_full_crc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_sensor_param
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_operation_handle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_updata_head_info
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChannelList
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_udp_tcp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_pwr_off
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_loss_handle
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_deinit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_signal_cb
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_net_recv_cb
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_net_con_cb
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_receive
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_deinit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_wait_reply
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_no_reply
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_register_callback
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_match_obj
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_deinit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_datas_transmit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;batVolt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acqBat
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatGetPrecent
</UL>

<P><STRONG><a name="[190]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[191]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[da]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[192]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[9d]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLoadSersorId
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_probeID
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_to_hexstr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_udp_tcp
</UL>

<P><STRONG><a name="[193]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[194]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[195]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[196]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[197]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[8b]"></a>acqBat</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, adc_config.o(i.acqBat))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = acqBat &rArr; adc_channel_sample &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatGetPrecent
</UL>

<P><STRONG><a name="[e0]"></a>acumulator_average</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, service_logic.o(i.acumulator_average))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = acumulator_average &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_start
</UL>

<P><STRONG><a name="[d4]"></a>acumulator_sensor_data</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, service_logic.o(i.acumulator_sensor_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = acumulator_sensor_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_TIMER12_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>adc_channel_sample</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, adc_config.o(i.adc_channel_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = adc_channel_sample &rArr; adc_regular_channel_config
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_software_trigger_enable
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_data_read
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_regular_channel_config
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acqBat
</UL>

<P><STRONG><a name="[e4]"></a>adc_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample
</UL>

<P><STRONG><a name="[e3]"></a>adc_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample
</UL>

<P><STRONG><a name="[e1]"></a>adc_regular_channel_config</STRONG> (Thumb, 172 bytes, Stack size 20 bytes, gd32f4xx_adc.o(i.adc_regular_channel_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = adc_regular_channel_config
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample
</UL>

<P><STRONG><a name="[e5]"></a>adc_regular_data_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_regular_data_read))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample
</UL>

<P><STRONG><a name="[e2]"></a>adc_software_trigger_enable</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, gd32f4xx_adc.o(i.adc_software_trigger_enable))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_channel_sample
</UL>

<P><STRONG><a name="[e6]"></a>at_get_last_recv</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, at_uart_hal.o(i.at_get_last_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = at_get_last_recv
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_loss_handle
</UL>

<P><STRONG><a name="[6d]"></a>at_net_con_cb</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, at_recv_cb.o(i.at_net_con_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_net_con_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_sim7020.o(i.sim7020_register_cb)
</UL>
<P><STRONG><a name="[6e]"></a>at_net_recv_cb</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, at_recv_cb.o(i.at_net_recv_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = at_net_recv_cb &rArr; net_recv_handle &rArr; net_operation_handle &rArr; StartSampleList &rArr; StartSampleUpload &rArr; sim7020_handle &rArr; net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv_handle
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hexstr_to_byte
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_sim7020.o(i.sim7020_register_cb)
</UL>
<P><STRONG><a name="[eb]"></a>at_parse_deinit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, at_parse.o(i.at_parse_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_parse_deinit &rArr; at_uart_deinit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_deinit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_deinit
</UL>

<P><STRONG><a name="[ed]"></a>at_parse_init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, at_parse.o(i.at_parse_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_parse_init &rArr; at_parse_deinit &rArr; at_uart_deinit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_deinit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_reboot
</UL>

<P><STRONG><a name="[ef]"></a>at_parse_match_obj</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, at_parse.o(i.at_parse_match_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = at_parse_match_obj &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_handle
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_loss_handle
</UL>

<P><STRONG><a name="[f1]"></a>at_register_callback</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, at_parse.o(i.at_register_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_register_callback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_register_cb
</UL>

<P><STRONG><a name="[f3]"></a>at_send_no_reply</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, at_parse.o(i.at_send_no_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = at_send_no_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_set_band
</UL>

<P><STRONG><a name="[f5]"></a>at_send_wait_reply</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, at_parse.o(i.at_send_wait_reply))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_receive
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_udp_tcp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_atcmd
</UL>

<P><STRONG><a name="[6c]"></a>at_signal_cb</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, at_recv_cb.o(i.at_signal_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_signal_cb &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dev_sim7020.o(i.sim7020_register_cb)
</UL>
<P><STRONG><a name="[ec]"></a>at_uart_deinit</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, at_uart_hal.o(i.at_uart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_uart_deinit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_deinit
</UL>

<P><STRONG><a name="[ee]"></a>at_uart_init</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, at_uart_hal.o(i.at_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = at_uart_init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_recv_buf_regster
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_init
</UL>

<P><STRONG><a name="[f6]"></a>at_uart_receive</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, at_uart_hal.o(i.at_uart_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = at_uart_receive &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_recv_reset
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_handle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_wait_reply
</UL>

<P><STRONG><a name="[f4]"></a>at_uart_send</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, at_uart_hal.o(i.at_uart_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_datas_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_wait_reply
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_no_reply
</UL>

<P><STRONG><a name="[8c]"></a>batVolt</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, adc_config.o(i.batVolt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = batVolt &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatGetPrecent
</UL>

<P><STRONG><a name="[fc]"></a>communication_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, communicate.o(i.communication_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = communication_init &rArr; sim7020_init &rArr; sim7020_deinit &rArr; sim7020_pwr_off &rArr; sim7020_sleep &rArr; sim7020_send_atcmd &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_reboot
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_ctrl_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[100]"></a>communication_ls_debug</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, communicate.o(i.communication_ls_debug))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = communication_ls_debug
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_debug_status
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_handle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_req
</UL>

<P><STRONG><a name="[102]"></a>communication_reboot</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, communicate.o(i.communication_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = communication_reboot &rArr; sim7020_reboot &rArr; sim7020_set_band &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_reboot
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_debug_data
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLoadSersorId
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[106]"></a>communication_req</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, communicate.o(i.communication_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = communication_req &rArr; sim7020_handle &rArr; net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_handle
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_get_idel
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_close_sta
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_udp_tcp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_retra_handle
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_ls_debug
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSetMode
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[135]"></a>crc16</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, crc16.o(i.crc16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = crc16
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraDealData
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendPkg
</UL>

<P><STRONG><a name="[157]"></a>crc16_con</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, crc16.o(i.crc16_con))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = crc16_con
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_full_crc
</UL>

<P><STRONG><a name="[159]"></a>dac_data_set</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, gd32f4xx_dac.o(i.dac_data_set))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gain
</UL>

<P><STRONG><a name="[112]"></a>dci_capture_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_dci.o(i.dci_capture_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config
</UL>

<P><STRONG><a name="[d2]"></a>dci_config</STRONG> (Thumb, 526 bytes, Stack size 40 bytes, dci_config.o(i.dci_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = dci_config &rArr; gpio_out_config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_sync_codes_disable
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_capture_enable
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_ckout0_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_out_config
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_TIMER12_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[d0]"></a>dci_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_dci.o(i.dci_disable))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_TIMER12_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>dci_dma_config</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, dci_config.o(i.dci_dma_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = dci_dma_config &rArr; dma_single_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_single_data_mode_init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_subperipheral_select
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_TIMER12_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[ca]"></a>dci_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_dci.o(i.dci_enable))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>dci_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32f4xx_dci.o(i.dci_init))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config
</UL>

<P><STRONG><a name="[110]"></a>dci_sync_codes_disable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_dci.o(i.dci_sync_codes_disable))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config
</UL>

<P><STRONG><a name="[99]"></a>delay_1ms</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, systick.o(i.delay_1ms))
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_sleep
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_reboot
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_init
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendSpecifiedPkg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendDataFrame
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_execute_instruction
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_set_apn
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_pwr_off
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_receive
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_no_reply
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_DelayMs
</UL>

<P><STRONG><a name="[c5]"></a>delay_decrement</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick.o(i.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d1]"></a>dma_channel_disable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_TIMER12_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>dma_channel_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[116]"></a>dma_channel_subperipheral_select</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, gd32f4xx_dma.o(i.dma_channel_subperipheral_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_channel_subperipheral_select
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_dma_config
</UL>

<P><STRONG><a name="[113]"></a>dma_deinit</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, gd32f4xx_dma.o(i.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_dma_config
</UL>

<P><STRONG><a name="[115]"></a>dma_single_data_mode_init</STRONG> (Thumb, 346 bytes, Stack size 28 bytes, gd32f4xx_dma.o(i.dma_single_data_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dma_single_data_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_dma_config
</UL>

<P><STRONG><a name="[117]"></a>enable_tiemr3_50hz</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, timer_config.o(i.enable_tiemr3_50hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = enable_tiemr3_50hz
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_start
</UL>

<P><STRONG><a name="[d7]"></a>fmc_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32f4xx_fmc.o(i.fmc_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashBatteryCapacity
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_datas_to_flash
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_sector_by_address
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Flash_double_Word
</UL>

<P><STRONG><a name="[9e]"></a>fmc_lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32f4xx_fmc.o(i.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashBatteryCapacity
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLoadSersorId
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_datas_to_flash
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_sector_by_address
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Flash_double_Word
</UL>

<P><STRONG><a name="[11b]"></a>fmc_ready_wait</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, gd32f4xx_fmc.o(i.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_sector_erase
</UL>

<P><STRONG><a name="[11a]"></a>fmc_sector_erase</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, gd32f4xx_fmc.o(i.fmc_sector_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = fmc_sector_erase &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_sector_by_address
</UL>

<P><STRONG><a name="[11c]"></a>fmc_state_get</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, gd32f4xx_fmc.o(i.fmc_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[9b]"></a>fmc_unlock</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f4xx_fmc.o(i.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashBatteryCapacity
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLoadSersorId
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_datas_to_flash
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_sector_by_address
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Flash_double_Word
</UL>

<P><STRONG><a name="[d6]"></a>fmc_word_program</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, gd32f4xx_fmc.o(i.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashBatteryCapacity
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_datas_to_flash
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Flash_double_Word
</UL>

<P><STRONG><a name="[6a]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usart_config.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[121]"></a>gd_debug_com_init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, usart_config.o(i.gd_debug_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = gd_debug_com_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_rts_config
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_hardware_flow_cts_config
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_out_config
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ce]"></a>get_sample_count</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, service_logic.o(i.get_sample_count))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[150]"></a>get_sample_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, service_logic.o(i.get_sample_data))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_full_crc
</UL>

<P><STRONG><a name="[cd]"></a>get_sample_flag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, service_logic.o(i.get_sample_flag))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_start
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
</UL>

<P><STRONG><a name="[10e]"></a>gpio_af_set</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_plus_output_gpio_config
</UL>

<P><STRONG><a name="[b5]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_reboot
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SetNSS
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_Reset
</UL>

<P><STRONG><a name="[b6]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_reboot
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_TIMER12_IRQHandler
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SetNSS
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_Reset
</UL>

<P><STRONG><a name="[12c]"></a>gpio_config</STRONG> (Thumb, 314 bytes, Stack size 16 bytes, gpio_config.o(i.gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = gpio_config &rArr; dci_dma_config &rArr; dma_single_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_dma_config
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_plus_output_gpio_config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_spi_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_out_config
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_in_config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12d]"></a>gpio_in_config</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, gpio_config.o(i.gpio_in_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = gpio_in_config &rArr; gpio_mode_set
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[8d]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_reboot
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_GetDIO0
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatGetPrecent
</UL>

<P><STRONG><a name="[10c]"></a>gpio_mode_set</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_out_config
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_in_config
</UL>

<P><STRONG><a name="[10f]"></a>gpio_out_config</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, gpio_config.o(i.gpio_out_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = gpio_out_config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_plus_output_gpio_config
</UL>

<P><STRONG><a name="[130]"></a>gpio_output_options_set</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, gd32f4xx_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_out_config
</UL>

<P><STRONG><a name="[134]"></a>loraDealData</STRONG> (Thumb, 304 bytes, Stack size 24 bytes, lora.o(i.loraDealData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = loraDealData &rArr; read_sensorid_form_flash &rArr; read_double_words_form_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_network_id_from_flash
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensorid_form_flash
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
</UL>

<P><STRONG><a name="[139]"></a>loraSendSpecifiedPkg</STRONG> (Thumb, 300 bytes, Stack size 72 bytes, lora.o(i.loraSendSpecifiedPkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = loraSendSpecifiedPkg &rArr; loraSetMode &rArr; SX1278_begin &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSetMode
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendPkg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraDataPkgAddData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraAddExtDataPkg
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraAddDataPkginst
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
</UL>

<P><STRONG><a name="[107]"></a>loraSetMode</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lora.o(i.loraSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = loraSetMode &rArr; SX1278_begin &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_begin
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryRx
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_ctrl_init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraTxData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendSpecifiedPkg
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_req
</UL>

<P><STRONG><a name="[96]"></a>loraTxData</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lora.o(i.loraTxData))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = loraTxData &rArr; loraSendDataFrame &rArr; loraSendPkg &rArr; SX1278_LoRaEntryTx &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSetMode
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendDataFrame
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraAddDataPkginst
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_execute_instruction
</UL>

<P><STRONG><a name="[fd]"></a>lora_ctrl_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lora.o(i.lora_ctrl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lora_ctrl_init &rArr; loraSetMode &rArr; SX1278_begin &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_init
</UL>

<P><STRONG><a name="[108]"></a>lora_passivity_communication</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, service_logic.o(i.lora_passivity_communication))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lora_passivity_communication &rArr; loraSendSpecifiedPkg &rArr; loraSetMode &rArr; SX1278_begin &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_network_id_from_flash
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_receive_data
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraTxData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendSpecifiedPkg
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraDealData
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensorid_form_flash
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Tick
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_start
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_execute_instruction
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_req
</UL>

<P><STRONG><a name="[13a]"></a>lora_receive_data</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lora.o(i.lora_receive_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lora_receive_data &rArr; SX1278_LoRaRxPacket &rArr; SX1278_SPIBurstRead &rArr; SX1278_hw_SPIReadByte
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_read
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaRxPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
</UL>

<P><STRONG><a name="[12e]"></a>lora_spi_config</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, spi_config.o(i.lora_spi_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lora_spi_config
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[63]"></a>main</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = main &rArr; communication_req &rArr; sim7020_handle &rArr; net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_network_id_to_flash
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Flash_double_Word
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensorid_form_flash
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_req
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_reboot
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_init
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Tick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[104]"></a>nb_usart_init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, usart_config.o(i.nb_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = nb_usart_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_stop_bit_set
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_out_config
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_reboot
</UL>

<P><STRONG><a name="[105]"></a>net_get_debug_data</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, net_protocol.o(i.net_get_debug_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_get_debug_data &rArr; full_sensor_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_sensor_id
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_reboot
</UL>

<P><STRONG><a name="[101]"></a>net_get_debug_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_protocol.o(i.net_get_debug_status))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_ls_debug
</UL>

<P><STRONG><a name="[147]"></a>net_get_heart_data</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, net_protocol.o(i.net_get_heart_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = net_get_heart_data &rArr; full_sensor_id
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_sensor_id
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_handle
</UL>

<P><STRONG><a name="[c4]"></a>net_get_ls_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_protocol.o(i.net_get_ls_close))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSampleUpload
</UL>

<P><STRONG><a name="[153]"></a>net_get_ls_send_succ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_protocol.o(i.net_get_ls_send_succ))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_retra_handle
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_udp_tcp
</UL>

<P><STRONG><a name="[ea]"></a>net_recv_handle</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, net_protocol.o(i.net_recv_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = net_recv_handle &rArr; net_operation_handle &rArr; StartSampleList &rArr; StartSampleUpload &rArr; sim7020_handle &rArr; net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_close_sta
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_retra_handle
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_wait_sta
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_send_sta
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_operation_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_net_recv_cb
</UL>

<P><STRONG><a name="[c0]"></a>net_response_sample</STRONG> (Thumb, 588 bytes, Stack size 56 bytes, net_protocol.o(i.net_response_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = net_response_sample &rArr; net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_close_sta
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_udp_tcp
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample_flag
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOn
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;powerOff
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_start
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample_data
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;short_swap_byte
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_send_sta
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_full_crc
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_updata_head_info
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_sensor_id
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ls_send_succ
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_gain
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_retra_handle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSampleUpload
</UL>

<P><STRONG><a name="[c3]"></a>net_retra_handle</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, net_protocol.o(i.net_retra_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = net_retra_handle &rArr; net_response_sample &rArr; net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_udp_tcp
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ls_send_succ
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_req
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSampleUpload
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv_handle
</UL>

<P><STRONG><a name="[109]"></a>net_send_udp_tcp</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, net_protocol.o(i.net_send_udp_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_send_sta
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_to_hexstr
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_udp_tcp
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_handle
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_retra_handle
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_req
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_operation
</UL>

<P><STRONG><a name="[10b]"></a>net_set_close_sta</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, net_protocol.o(i.net_set_close_sta))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_set_close_sta &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_req
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_operation
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_operation_handle
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv_handle
</UL>

<P><STRONG><a name="[bf]"></a>net_set_probeID</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, net_protocol.o(i.net_set_probeID))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = net_set_probeID &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSampleUpload
</UL>

<P><STRONG><a name="[14e]"></a>net_set_send_sta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_protocol.o(i.net_set_send_sta))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_udp_tcp
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_operation
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv_handle
</UL>

<P><STRONG><a name="[14d]"></a>net_set_wait_sta</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, net_protocol.o(i.net_set_wait_sta))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv_handle
</UL>

<P><STRONG><a name="[141]"></a>nvic_irq_enable</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, gd32f4xx_misc.o(i.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>powerOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gpio_config.o(i.powerOff))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
</UL>

<P><STRONG><a name="[13b]"></a>powerOn</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, gpio_config.o(i.powerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = powerOn
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
</UL>

<P><STRONG><a name="[10d]"></a>rcu_ckout0_config</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gd32f4xx_rcu.o(i.rcu_ckout0_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_ckout0_config
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config
</UL>

<P><STRONG><a name="[142]"></a>rcu_clock_freq_get</STRONG> (Thumb, 264 bytes, Stack size 84 bytes, gd32f4xx_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[103]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_dma_config
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_reboot
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_slave1_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_master_config
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_plus_output_gpio_config
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_spi_config
</UL>

<P><STRONG><a name="[17a]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[179]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>

<P><STRONG><a name="[164]"></a>rcu_timer_clock_prescaler_config</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32f4xx_rcu.o(i.rcu_timer_clock_prescaler_config))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_slave1_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_master_config
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[155]"></a>read_datas_to_flash</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fmc_flash.o(i.read_datas_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = read_datas_to_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ip_prot_to_flash
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_network_id_to_flash
</UL>

<P><STRONG><a name="[9c]"></a>read_double_words_form_flash</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fmc_flash.o(i.read_double_words_form_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_double_words_form_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReLoadSersorId
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_sensorid_form_flash
</UL>

<P><STRONG><a name="[132]"></a>read_network_id_from_flash</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, fmc_flash.o(i.read_network_id_from_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = read_network_id_from_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_word_form_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraDealData
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraAddDataPkginst
</UL>

<P><STRONG><a name="[97]"></a>read_sensorid_form_flash</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, fmc_flash.o(i.read_sensorid_form_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = read_sensorid_form_flash &rArr; read_double_words_form_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_double_words_form_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraDealData
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_execute_instruction
</UL>

<P><STRONG><a name="[156]"></a>read_word_form_flash</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fmc_flash.o(i.read_word_form_flash))
<BR><BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_network_id_from_flash
</UL>

<P><STRONG><a name="[cf]"></a>sample_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, service_logic.o(i.sample_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
</UL>

<P><STRONG><a name="[158]"></a>sample_flag_set</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, service_logic.o(i.sample_flag_set))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_start
</UL>

<P><STRONG><a name="[13c]"></a>sample_start</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, service_logic.o(i.sample_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sample_start &rArr; acumulator_average &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample_flag
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Tick
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_tiemr3_50hz
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sample_flag_set
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acumulator_average
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_passivity_communication
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
</UL>

<P><STRONG><a name="[14f]"></a>set_gain</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, dac_config.o(i.set_gain))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = set_gain
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dac_data_set
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
</UL>

<P><STRONG><a name="[151]"></a>short_swap_byte</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, net_protocol.o(i.short_swap_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = short_swap_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
</UL>

<P><STRONG><a name="[15a]"></a>sim7020_deinit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dev_sim7020.o(i.sim7020_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sim7020_deinit &rArr; sim7020_pwr_off &rArr; sim7020_sleep &rArr; sim7020_send_atcmd &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_pwr_off
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_deinit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_init
</UL>

<P><STRONG><a name="[10a]"></a>sim7020_get_idel</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dev_sim7020.o(i.sim7020_get_idel))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_req
</UL>

<P><STRONG><a name="[c2]"></a>sim7020_handle</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, dev_sim7020.o(i.sim7020_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = sim7020_handle &rArr; net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_udp_tcp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_ls_debug
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_heart_data
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_loss_handle
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_receive
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_match_obj
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_req
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSampleUpload
</UL>

<P><STRONG><a name="[ff]"></a>sim7020_init</STRONG> (Thumb, 408 bytes, Stack size 8 bytes, dev_sim7020.o(i.sim7020_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = sim7020_init &rArr; sim7020_deinit &rArr; sim7020_pwr_off &rArr; sim7020_sleep &rArr; sim7020_send_atcmd &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_set_apn
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_deinit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_atcmd
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_register_cb
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_init
</UL>

<P><STRONG><a name="[c1]"></a>sim7020_loss_handle</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, dev_sim7020.o(i.sim7020_loss_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sim7020_loss_handle &rArr; at_parse_match_obj &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_get_last_recv
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_parse_match_obj
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_handle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSampleUpload
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_udp_tcp
</UL>

<P><STRONG><a name="[15b]"></a>sim7020_pwr_off</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dev_sim7020.o(i.sim7020_pwr_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = sim7020_pwr_off &rArr; sim7020_sleep &rArr; sim7020_send_atcmd &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_sleep
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_deinit
</UL>

<P><STRONG><a name="[fe]"></a>sim7020_reboot</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, dev_sim7020.o(i.sim7020_reboot))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = sim7020_reboot &rArr; sim7020_set_band &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_set_band
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_reboot
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;communication_init
</UL>

<P><STRONG><a name="[154]"></a>sim7020_send_udp_tcp</STRONG> (Thumb, 304 bytes, Stack size 64 bytes, dev_sim7020.o(i.sim7020_send_udp_tcp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_ls_send_succ
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_loss_handle
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_wait_reply
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_udp_tcp
</UL>

<P><STRONG><a name="[15d]"></a>sim7020_set_apn</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, dev_sim7020.o(i.sim7020_set_apn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sim7020_set_apn
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_init
</UL>

<P><STRONG><a name="[14b]"></a>sim7020_set_power</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, dev_sim7020.o(i.sim7020_set_power))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_operation_handle
</UL>

<P><STRONG><a name="[15f]"></a>sim7020_sleep</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, dev_sim7020.o(i.sim7020_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = sim7020_sleep &rArr; sim7020_send_atcmd &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_send_atcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_pwr_off
</UL>

<P><STRONG><a name="[13f]"></a>spi_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_enable))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_spi_config
</UL>

<P><STRONG><a name="[ba]"></a>spi_i2s_data_receive</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_i2s_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPIReadByte
</UL>

<P><STRONG><a name="[b8]"></a>spi_i2s_data_transmit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_i2s_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPIReadByte
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPICommand
</UL>

<P><STRONG><a name="[b9]"></a>spi_i2s_flag_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_i2s_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPIReadByte
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_hw_SPICommand
</UL>

<P><STRONG><a name="[13e]"></a>spi_init</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, gd32f4xx_spi.o(i.spi_init))
<BR><BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_spi_config
</UL>

<P><STRONG><a name="[140]"></a>systick_config</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, systick.o(i.systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[163]"></a>timer0_pwm1_output_config</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, timer_config.o(i.timer0_pwm1_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer0_pwm1_output_config &rArr; timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_disable
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_slave_mode_select
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_single_pulse_mode_config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_slave_mode_config
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_trigger_source_select
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[171]"></a>timer1_master3_slave1_config</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, timer_config.o(i.timer1_master3_slave1_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer1_master3_slave1_config &rArr; timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_dma_request_source_select
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_disable
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_slave_mode_select
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_slave_mode_config
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_output_trigger_source_select
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_trigger_source_select
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_dma_enable
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[176]"></a>timer2_slave1_config</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, timer_config.o(i.timer2_slave1_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = timer2_slave1_config &rArr; timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_disable
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_slave_mode_select
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_single_pulse_mode_config
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_slave_mode_config
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_trigger_source_select
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[177]"></a>timer3_master_config</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, timer_config.o(i.timer3_master_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer3_master_config &rArr; timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_slave_mode_config
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_output_trigger_source_select
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[178]"></a>timer7_slave1_config</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, timer_config.o(i.timer7_slave1_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer7_slave1_config &rArr; timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_timer_clock_prescaler_config
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_disable
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_slave_mode_select
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_slave_mode_config
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_trigger_source_select
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_config
</UL>

<P><STRONG><a name="[16d]"></a>timer_auto_reload_shadow_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_auto_reload_shadow_disable))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_slave1_config
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[174]"></a>timer_channel_dma_request_source_select</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_channel_dma_request_source_select))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
</UL>

<P><STRONG><a name="[167]"></a>timer_channel_output_config</STRONG> (Thumb, 484 bytes, Stack size 8 bytes, gd32f4xx_timer.o(i.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[169]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_channel_output_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[168]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[16a]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[143]"></a>timer_config</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer_config.o(i.timer_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = timer_config &rArr; timer2_slave1_config &rArr; timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_slave1_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_master_config
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[165]"></a>timer_deinit</STRONG> (Thumb, 374 bytes, Stack size 8 bytes, gd32f4xx_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_slave1_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_master_config
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[c9]"></a>timer_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_disable))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_TIMER12_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[175]"></a>timer_dma_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_dma_enable))
<BR><BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
</UL>

<P><STRONG><a name="[118]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enable_tiemr3_50hz
</UL>

<P><STRONG><a name="[166]"></a>timer_init</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_slave1_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_master_config
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[16f]"></a>timer_input_trigger_source_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_input_trigger_source_select))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_slave1_config
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[172]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_slave1_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_master_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
</UL>

<P><STRONG><a name="[cc]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_TIMER12_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_slave1_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_master_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
</UL>

<P><STRONG><a name="[c8]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER7_UP_TIMER12_IRQHandler
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER3_IRQHandler
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER1_IRQHandler
</UL>

<P><STRONG><a name="[173]"></a>timer_master_output_trigger_source_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_master_output_trigger_source_select))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_master_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
</UL>

<P><STRONG><a name="[16e]"></a>timer_master_slave_mode_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_master_slave_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_slave1_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer3_master_config
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[12f]"></a>timer_plus_output_gpio_config</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, timer_config.o(i.timer_plus_output_gpio_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = timer_plus_output_gpio_config &rArr; gpio_out_config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_out_config
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_config
</UL>

<P><STRONG><a name="[16b]"></a>timer_primary_output_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_primary_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[16c]"></a>timer_single_pulse_mode_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_single_pulse_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[170]"></a>timer_slave_mode_select</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_timer.o(i.timer_slave_mode_select))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer7_slave1_config
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer2_slave1_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer1_master3_slave1_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer0_pwm1_output_config
</UL>

<P><STRONG><a name="[123]"></a>usart_baudrate_set</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, gd32f4xx_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_set_band
</UL>

<P><STRONG><a name="[11d]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_datas_transmit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[fa]"></a>usart_datas_transmit</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, usart_config.o(i.usart_datas_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Tick
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_send
</UL>

<P><STRONG><a name="[122]"></a>usart_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
</UL>

<P><STRONG><a name="[12b]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
</UL>

<P><STRONG><a name="[11e]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32f4xx_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_datas_transmit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[128]"></a>usart_hardware_flow_cts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_hardware_flow_cts_config))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
</UL>

<P><STRONG><a name="[127]"></a>usart_hardware_flow_rts_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_hardware_flow_rts_config))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
</UL>

<P><STRONG><a name="[f7]"></a>usart_interrupt_disable</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_interrupt_disable))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_uart_deinit
</UL>

<P><STRONG><a name="[145]"></a>usart_interrupt_enable</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
</UL>

<P><STRONG><a name="[126]"></a>usart_parity_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
</UL>

<P><STRONG><a name="[129]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
</UL>

<P><STRONG><a name="[125]"></a>usart_stop_bit_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_stop_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
</UL>

<P><STRONG><a name="[12a]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
</UL>

<P><STRONG><a name="[124]"></a>usart_word_length_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32f4xx_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nb_usart_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gd_debug_com_init
</UL>

<P><STRONG><a name="[144]"></a>write_Flash_double_Word</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, fmc_flash.o(i.write_Flash_double_Word))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_Flash_double_Word &rArr; fmc_erase_sector_by_address &rArr; get_falsh_sector &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_sector_by_address
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14c]"></a>write_ip_prot_to_flash</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, fmc_flash.o(i.write_ip_prot_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_ip_prot_to_flash &rArr; write_datas_to_flash &rArr; fmc_erase_sector_by_address &rArr; get_falsh_sector &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_datas_to_flash
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_datas_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_operation_handle
</UL>

<P><STRONG><a name="[98]"></a>write_network_id_to_flash</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, fmc_flash.o(i.write_network_id_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = write_network_id_to_flash &rArr; write_datas_to_flash &rArr; fmc_erase_sector_by_address &rArr; get_falsh_sector &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_datas_to_flash
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_datas_to_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LoRa_execute_instruction
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[162]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, systick.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
</UL>

<P><STRONG><a name="[131]"></a>loraAddDataPkginst</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lora.o(i.loraAddDataPkginst))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = loraAddDataPkginst &rArr; read_network_id_from_flash
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_network_id_from_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraTxData
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendSpecifiedPkg
</UL>

<P><STRONG><a name="[133]"></a>loraAddExtDataPkg</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lora.o(i.loraAddExtDataPkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = loraAddExtDataPkg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendSpecifiedPkg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendDataFrame
</UL>

<P><STRONG><a name="[137]"></a>loraDataPkgAddData</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, lora.o(i.loraDataPkgAddData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = loraDataPkgAddData
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendSpecifiedPkg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendDataFrame
</UL>

<P><STRONG><a name="[136]"></a>loraSendDataFrame</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, lora.o(i.loraSendDataFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = loraSendDataFrame &rArr; loraSendPkg &rArr; SX1278_LoRaEntryTx &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendPkg
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraDataPkgAddData
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraAddExtDataPkg
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_1ms
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraTxData
</UL>

<P><STRONG><a name="[138]"></a>loraSendPkg</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, lora.o(i.loraSendPkg))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = loraSendPkg &rArr; SX1278_LoRaEntryTx &rArr; SX1278_defaultConfig &rArr; SX1278_config &rArr; SX1278_sleep &rArr; SX1278_SPIWrite &rArr; SX1278_hw_SetNSS
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaTxPacket
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX1278_LoRaEntryTx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendSpecifiedPkg
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loraSendDataFrame
</UL>

<P><STRONG><a name="[d5]"></a>fmc_erase_sector_by_address</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, fmc_flash.o(i.fmc_erase_sector_by_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = fmc_erase_sector_by_address &rArr; get_falsh_sector &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_sector_erase
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_falsh_sector
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Tick
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteFlashBatteryCapacity
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_datas_to_flash
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_Flash_double_Word
</UL>

<P><STRONG><a name="[119]"></a>get_falsh_sector</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, fmc_flash.o(i.get_falsh_sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_falsh_sector &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_sector_by_address
</UL>

<P><STRONG><a name="[17b]"></a>write_datas_to_flash</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, fmc_flash.o(i.write_datas_to_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = write_datas_to_flash &rArr; fmc_erase_sector_by_address &rArr; get_falsh_sector &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_erase_sector_by_address
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ip_prot_to_flash
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_network_id_to_flash
</UL>

<P><STRONG><a name="[161]"></a>system_clock_200m_irc16m</STRONG> (Thumb, 238 bytes, Stack size 0 bytes, system_gd32f4xx.o(i.system_clock_200m_irc16m))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[c7]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32f4xx.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_200m_irc16m
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e9]"></a>hexstr_to_byte</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, at_recv_cb.o(i.hexstr_to_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hexstr_to_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_net_recv_cb
</UL>

<P><STRONG><a name="[15c]"></a>sim7020_register_cb</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dev_sim7020.o(i.sim7020_register_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = sim7020_register_cb &rArr; at_register_callback &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_register_callback
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_init
</UL>

<P><STRONG><a name="[15e]"></a>sim7020_send_atcmd</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, dev_sim7020.o(i.sim7020_send_atcmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = sim7020_send_atcmd &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_wait_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_sleep
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_init
</UL>

<P><STRONG><a name="[160]"></a>sim7020_set_band</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dev_sim7020.o(i.sim7020_set_band))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = sim7020_set_band &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;at_send_no_reply
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_reboot
</UL>

<P><STRONG><a name="[92]"></a>GetChannelList</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, net_protocol.o(i.GetChannelList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = GetChannelList &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSampleList
</UL>

<P><STRONG><a name="[bd]"></a>StartSampleList</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, net_protocol.o(i.StartSampleList))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = StartSampleList &rArr; StartSampleUpload &rArr; sim7020_handle &rArr; net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSampleUpload
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetChannelList
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_operation_handle
</UL>

<P><STRONG><a name="[fb]"></a>byte_to_hexstr</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, net_protocol.o(i.byte_to_hexstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = byte_to_hexstr &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_udp_tcp
</UL>

<P><STRONG><a name="[11f]"></a>full_sensor_id</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, net_protocol.o(i.full_sensor_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = full_sensor_id
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_debug_data
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_operation_handle
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_get_heart_data
</UL>

<P><STRONG><a name="[120]"></a>full_updata_head_info</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, net_protocol.o(i.full_updata_head_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = full_updata_head_info &rArr; BatGetPrecent &rArr; batVolt &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BatGetPrecent
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
</UL>

<P><STRONG><a name="[148]"></a>net_operation_handle</STRONG> (Thumb, 1902 bytes, Stack size 32 bytes, net_protocol.o(i.net_operation_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = net_operation_handle &rArr; StartSampleList &rArr; StartSampleUpload &rArr; sim7020_handle &rArr; net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_close_sta
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_ip_prot_to_flash
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_sensor_param
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_operation
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;full_sensor_id
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartSampleList
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sim7020_set_power
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_recv_handle
</UL>

<P><STRONG><a name="[14a]"></a>net_response_operation</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, net_protocol.o(i.net_response_operation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = net_response_operation &rArr; net_send_udp_tcp &rArr; sim7020_send_udp_tcp &rArr; at_send_wait_reply &rArr; at_uart_send &rArr; usart_datas_transmit &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_close_sta
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_send_udp_tcp
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_set_send_sta
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_operation_handle
</UL>

<P><STRONG><a name="[149]"></a>net_set_sensor_param</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, net_protocol.o(i.net_set_sensor_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = net_set_sensor_param &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_operation_handle
</UL>

<P><STRONG><a name="[152]"></a>sample_full_crc</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, net_protocol.o(i.sample_full_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sample_full_crc &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc16_con
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sample_data
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;net_response_sample
</UL>

<P><STRONG><a name="[db]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d9]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[dd]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[dc]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6b]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[68]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
